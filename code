const express = require('express')
const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const path = require('path')
const {format} = require('date-fns')

const databasePath = path.join(__dirname, 'todoApplication.db')

const app = express()

app.use(express.json())

let database = null

const initializeDbAndServer = async () => {
  try {
    database = await open({
      filename: databasePath,
      driver: sqlite3.Database,
    })

    app.listen(3000, () =>
      console.log('Server Running at http://localhost:3000/'),
    )
  } catch (error) {
    console.log(`DB Error: ${error.message}`)
    process.exit(1)
  }
}

initializeDbAndServer()

const formatDate = date => format(new Date(date), 'yyyy-MM-dd')

const isValidPriority = priority => ['HIGH', 'MEDIUM', 'LOW'].includes(priority)
const isValidStatus = status =>
  ['TO DO', 'IN PROGRESS', 'DONE'].includes(status)
const isValidCategory = category =>
  ['WORK', 'HOME', 'LEARNING'].includes(category)

const hasPriorityAndStatusProperties = requestQuery => {
  return (
    requestQuery.priority !== undefined && requestQuery.status !== undefined
  )
}

const hasPriorityProperty = requestQuery => {
  return requestQuery.priority !== undefined
}

const hasStatusProperty = requestQuery => {
  return requestQuery.status !== undefined
}

app.get('/todos/', async (request, response) => {
  const {status, priority, category, search_q} = request.query

  if (status && !isValidStatus(status)) {
    response.status(400).send('Invalid Todo Status')
    return
  }

  if (priority && !isValidPriority(priority)) {
    response.status(400).send('Invalid Todo Priority')
    return
  }

  if (category && !isValidCategory(category)) {
    response.status(400).send('Invalid Todo Category')
    return
  }

  let getTodosQuery = `
    SELECT *
    FROM todo
    WHERE 1`

  if (status) getTodosQuery += ` AND status = '${status}'`
  if (priority) getTodosQuery += ` AND priority = '${priority}'`
  if (category) getTodosQuery += ` AND category = '${category}'`
  if (search_q) getTodosQuery += ` AND todo LIKE '%${search_q}%'`

  try {
    const data = await database.all(getTodosQuery)
    response.send(data)
  } catch (error) {
    console.error(error.message)
    response.status(500).send('Internal Server Error')
  }
})


app.get('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params;

  const getTodoQuery = `
    SELECT *
    FROM todo
    WHERE id = ?;`;

  try {
    const todo = await database.get(getTodoQuery, todoId);
    if (todo) {
      response.send(todo);
    } else {
      response.status(404).send('Todo Not Found');
    }
  } catch (error) {
    console.error(error.message);
    response.status(500).send('Internal Server Error');
  }
});


app.get('/agenda/', async (request, response) => {
  const {date} = request.query

  if (!date || isNaN(Date.parse(date))) {
    response.status(400).send('Invalid Due Date')
    return
  }

  const formattedDate = formatDate(date)

  const getAgendaQuery = `
    SELECT *
    FROM todo
    WHERE due_date = ?;`

  try {
    const agenda = await database.all(getAgendaQuery, formattedDate)
    response.send(agenda)
  } catch (error) {
    console.error(error.message)
    response.status(500).send('Internal Server Error')
  }
})

app.post('/todos/', async (request, response) => {
  const {id, todo, priority, status, category, dueDate} = request.body

  if (!isValidPriority(priority)) {
    response.status(400).send('Invalid Todo Priority')
    return
  }

  if (!isValidStatus(status)) {
    response.status(400).send('Invalid Todo Status')
    return
  }

  if (!isValidCategory(category)) {
    response.status(400).send('Invalid Todo Category')
    return
  }

  if (!dueDate || isNaN(Date.parse(dueDate))) {
    response.status(400).send('Invalid Due Date')
    return
  }

  const formattedDueDate = formatDate(dueDate)

  const postTodoQuery = `
    INSERT INTO todo (id, todo, priority, status, category, due_date)
    VALUES (?, ?, ?, ?, ?, ?);`

  try {
    await database.run(postTodoQuery, [
      id,
      todo,
      priority,
      status,
      category,
      formattedDueDate,
    ])
    response.send('Todo Successfully Added')
  } catch (error) {
    console.error(error.message)
    response.status(500).send('Internal Server Error')
  }
})

app.put('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const {status, priority, category} = request.body

  if (status !== undefined && !isValidStatus(status)) {
    response.status(400).send('Invalid Todo Status')
    return
  }

  if (priority !== undefined && !isValidPriority(priority)) {
    response.status(400).send('Invalid Todo Priority')
    return
  }

  if (category !== undefined && !isValidCategory(category)) {
    response.status(400).send('Invalid Todo Category')
    return
  }

  let updateColumn = ''

  if (status !== undefined) {
    updateColumn = 'status'
  } else if (priority !== undefined) {
    updateColumn = 'priority'
  } else if (category !== undefined) {
    updateColumn = 'category'
  }

  const updateTodoQuery = `
    UPDATE todo
    SET ${updateColumn} = ?
    WHERE id = ?;`

  try {
    await database.run(updateTodoQuery, [
      status || priority || category,
      todoId,
    ])
    response.send(
      `${updateColumn.charAt(0).toUpperCase() + updateColumn.slice(1)} Updated`,
    )
  } catch (error) {
    console.error(error.message)
    response.status(500).send('Internal Server Error')
  }
})

app.delete('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const deleteTodoQuery = `DELETE FROM todo WHERE id = ?;`

  try {
    await database.run(deleteTodoQuery, todoId)
    response.send('Todo Deleted')
  } catch (error) {
    console.error(error.message)
    response.status(500).send('Internal Server Error')
  }
})

module.exports = app 
