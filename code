const express = require('express')
const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const path = require('path')
const {format} = require('date-fns')

const databasePath = path.join(__dirname, 'todoApplication.db')
const app = express()
app.use(express.json())

let database = null

const initializeDbAndServer = async () => {
  try {
    database = await open({
      filename: databasePath,
      driver: sqlite3.Database,
    })

    app.listen(3000, () =>
      console.log('Server Running at http://localhost:3000/'),
    )
  } catch (error) {
    console.error(`DB Error: ${error.message}`)
    process.exit(1)
  }
}

initializeDbAndServer()

const formatDate = date => format(new Date(date), 'yyyy-MM-dd')

const isValidStatus = status => ['TO DO', 'IN PROGRESS', 'DONE'].includes(status)
const isValidPriority = priority => ['LOW', 'MEDIUM', 'HIGH'].includes(priority)
const isValidCategory = category => ['WORK', 'HOME', 'LEARNING'].includes(category)
const isValidDate = date => !isNaN(Date.parse(date))

app.get('/todos/', async (request, response) => {
  const { status, priority, category, search_q } = request.query

  let getTodosQuery = 'SELECT * FROM todo WHERE 1=1'
  const queryParams = []

  if (status !== undefined) {
    if (!isValidStatus(status)) {
      return response.status(400).send('Invalid Todo Status')
    }
    getTodosQuery += ' AND status = ?'
    queryParams.push(status)
  }

  if (priority !== undefined) {
    if (!isValidPriority(priority)) {
      return response.status(400).send('Invalid Todo Priority')
    }
    getTodosQuery += ' AND priority = ?'
    queryParams.push(priority)
  }

  if (category !== undefined) {
    if (!isValidCategory(category)) {
      return response.status(400).send('Invalid Todo Category')
    }
    getTodosQuery += ' AND category = ?'
    queryParams.push(category)
  }

  if (search_q !== undefined) {
    getTodosQuery += ' AND todo LIKE ?'
    queryParams.push(`%${search_q}%`)
  }

  try {
    const data = await database.all(getTodosQuery, queryParams)
    response.send(data)
  } catch (error) {
    console.error(error.message)
    response.status(500).send('Internal Server Error')
  }
})

app.get('/todos/:todoId/', async (request, response) => {
  const { todoId } = request.params
  const getTodoQuery = 'SELECT * FROM todo WHERE id = ?'

  try {
    const todo = await database.get(getTodoQuery, todoId)
    if (todo) {
      response.send(todo)
    } else {
      response.status(404).send('Todo Not Found')
    }
  } catch (error) {
    console.error(error.message)
    response.status(500).send('Internal Server Error')
  }
})

app.get('/agenda/', async (request, response) => {
  const { date } = request.query

  if (!isValidDate(date)) {
    return response.status(400).send('Invalid Due Date')
  }

  const formattedDate = formatDate(date)
  const getAgendaQuery = 'SELECT * FROM todo WHERE due_date = ?'

  try {
    const agenda = await database.all(getAgendaQuery, formattedDate)
    response.send(agenda)
  } catch (error) {
    console.error(error.message)
    response.status(500).send('Internal Server Error')
  }
})

app.post('/todos/', async (request, response) => {
  const {id, todo, priority, status, category, dueDate} = request.body

  if (!isValidPriority(priority)) {
    response.status(400).send('Invalid Todo Priority')
    return
  }

  if (!isValidStatus(status)) {
    response.status(400).send('Invalid Todo Status')
    return
  }

  if (!isValidCategory(category)) {
    response.status(400).send('Invalid Todo Category')
    return
  }

  if (!dueDate || isNaN(Date.parse(dueDate))) {
    response.status(400).send('Invalid Due Date')
    return
  }

  const formattedDueDate = formatDate(dueDate)

  const postTodoQuery = `
    INSERT INTO todo (id, todo, priority, status, category, due_date)
    VALUES (?, ?, ?, ?, ?, ?);`

  try {
    await database.run(postTodoQuery, [
      id,
      todo,
      priority,
      status,
      category,
      formattedDueDate,
    ])
    response.send('Todo Successfully Added')
  } catch (error) {
    console.error(error.message)
    response.status(500).send('Internal Server Error')
  }
})

app.put('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const {status, priority, category, dueDate, todo} = request.body

  if (status !== undefined && !isValidStatus(status)) {
    response.status(400).send('Invalid Todo Status')
    return
  }

  if (priority !== undefined && !isValidPriority(priority)) {
    response.status(400).send('Invalid Todo Priority')
    return
  }

  if (category !== undefined && !isValidCategory(category)) {
    response.status(400).send('Invalid Todo Category')
    return
  }

  if (
    dueDate !== undefined &&
    (isNaN(Date.parse(dueDate)) || !dueDate.match(/^\d{4}-\d{2}-\d{2}$/))
  ) {
    response.status(400).send('Invalid Due Date')
    return
  }

  let updateColumn = ''

  if (status !== undefined) {
    updateColumn = 'status'
  } else if (priority !== undefined) {
    updateColumn = 'priority'
  } else if (category !== undefined) {
    updateColumn = 'category'
  } else if (dueDate !== undefined) {
    updateColumn = 'due_date'
  } else if (todo !== undefined) {
    updateColumn = 'todo'
  }

  const updateTodoQuery = `
        UPDATE todo
        SET ${updateColumn} = ?
        WHERE id = ?;`

  try {
    await database.run(updateTodoQuery, [
      status || priority || category || dueDate || todo,
      todoId,
    ])

    let message = ''
    switch (updateColumn) {
      case 'status':
        message = 'Status Updated'
        break
      case 'priority':
        message = 'Priority Updated'
        break
      case 'category':
        message = 'Category Updated'
        break
      case 'due_date':
        message = 'Due Date Updated'
        break
      case 'todo':
        message = 'Todo Updated'
        break
      default:
        message = 'Property Updated'
        break
    }

    response.send(message)
  } catch (error) {
    console.error(error.message)
    response.status(500).send('Internal Server Error')
  }
})

app.delete('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const deleteTodoQuery = `DELETE FROM todo WHERE id = ?;`

  try {
    await database.run(deleteTodoQuery, todoId)
    response.send('Todo Deleted')
  } catch (error) {
    console.error(error.message)
    response.status(500).send('Internal Server Error')
  }
})

module.exports = app
